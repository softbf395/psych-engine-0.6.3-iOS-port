# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the action will run.
on: [push, workflow_dispatch]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  androidBuild:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [debug, release] # Matrix for Android debug and release builds

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Setup Android NDK
        uses: nttld/setup-ndk@main
        id: setup-ndk
        with:
          ndk-version: r21e

      - name: Setup Java JDK
        uses: actions/setup-java@main
        with:
          distribution: 'zulu'
          java-version: '18'

      - name: Setup Haxe
        uses: krdlab/setup-haxe@v1.2.0
        with:
          haxe-version: 4.2.5

      - name: Restore Cache
        uses: actions/cache@main
        with:
          # Caching Haxelib and build artifacts to speed up subsequent builds
          key: cache-build-android-${{ matrix.build_type }}-${{ hashFiles('**/haxelib.json') }}
          path: |
            .haxelib/
            export/${{ matrix.build_type }}/android/haxe/
            export/${{ matrix.build_type }}/android/obj/
          restore-keys: |
            cache-build-android-${{ matrix.build_type }}-

      - name: Installing Libraries
        run: |
          haxelib setup ~/haxelib
          haxelib --quiet install hxcpp > /dev/null
          haxe -cp ./actions -D analyzer-optimize -main Main --interp

      - name: Configure Android
        run: |
          haxelib run lime setup -alias -y
          haxelib run lime config ANDROID_SDK $ANDROID_HOME
          haxelib run lime config ANDROID_NDK_ROOT $ANDROID_NDK_HOME
          haxelib run lime config JAVA_HOME $JAVA_HOME
          haxelib run lime config ANDROID_SETUP true
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Building Android (${{ matrix.build_type }})
        run: |
          haxelib run lime build android ${{ matrix.build_type == 'debug' && '-debug' || '' }} --app-version="4.0.0-${{ github.run_id}}"

      - name: Upload Android Artifact (${{ matrix.build_type }})
        uses: actions/upload-artifact@main
        with:
          name: androidBuild-${{ matrix.build_type }}
          path: export/${{ matrix.build_type }}/android/bin/app/build/outputs/apk/${{ matrix.build_type }} # Path adjusted for debug/release APKs
          if-no-files-found: error

      - name: Save Cache
        uses: actions/cache@main
        with:
          # Saving cache for future builds
          key: cache-build-android-${{ matrix.build_type }}-${{ hashFiles('**/haxelib.json') }}
          path: |
            .haxelib/
            export/${{ matrix.build_type }}/android/haxe/
            export/${{ matrix.build_type }}/android/obj/

  iosBuild:
    runs-on: macos-latest # iOS builds require macOS runners
    strategy:
      matrix:
        build_type: [debug, release] # Matrix for iOS debug and release builds

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.2.5

      - name: Restore Cache
        uses: actions/cache@main
        with:
          # Caching Haxelib and build artifacts specific to iOS
          key: cache-build-ios-${{ matrix.build_type }}-${{ hashFiles('**/haxelib.json') }}
          path: |
            .haxelib/
            export/${{ matrix.build_type }}/ios/haxe/
            export/${{ matrix.build_type }}/ios/obj/
          restore-keys: |
            cache-build-ios-${{ matrix.build_type }}-

      - name: Installing Libraries
        run: |
          haxelib install format
          haxelib install hxcpp --quiet
          haxelib install hmm --quiet
          haxelib run hmm install --quiet

      - name: Building iOS (${{ matrix.build_type }})
        run: |
          haxelib run lime build ios ${{ matrix.build_type == 'debug' && '-debug' || '' }} --app-version="4.0.0-${{ github.run_id}}"

      - name: Upload iOS Artifact (${{ matrix.build_type }})
        uses: actions/upload-artifact@main
        with:
          name: iosBuild-${{ matrix.build_type }}
          # The path for iOS artifacts typically points to the .app bundle or .ipa
          # Adjust this path based on where lime generates your iOS output.
          # Common paths might be:
          # - export/release/ios/build/Release-iphoneos/YourApp.app
          # - export/debug/ios/build/Debug-iphonesimulator/YourApp.app
          # For simplicity, we'll upload the entire 'bin' directory.
          path: export/${{ matrix.build_type }}/ios/bin
          if-no-files-found: error

      - name: Save Cache
        uses: actions/cache@main
        with:
          # Saving cache for future iOS builds
          key: cache-build-ios-${{ matrix.build_type }}-${{ hashFiles('**/haxelib.json') }}
          path: |
            .haxelib/
            export/${{ matrix.build_type }}/ios/haxe/
            export/${{ matrix.build_type }}/ios/obj/
